%pylab inline
def brusselator(A, B):
    def f(z):
        fz=array([z[0],z[1]])
        fz[0]=A+z[0]**2*z[1]-(B+1)*z[0]
        fz[1]=B*z[0]-z[0]**2*z[1]
        return fz
    return f

def stepEuler(f, zt, h):
    return zt+h*f(zt)

def approximation(f, z0, T, P):
    L=[]
    L.append(z0)
    z=array(z0)
    for i in range(P):
        z=stepEuler(f,z,T/P)
        L.append(z)
    return L

def plot_concentration(T,P,L):
    xmin=0
    xmax=T
    x=linspace(xmin,xmax,P,endpoint=True)
    y=[]
    for i in L:
        y.append(i)
    fig=figure()
    plot(x,y)
    xlabel('temps')
    ylabel('concentration')
    legend()
    plt.savefig('evol-concentration.pdf')
